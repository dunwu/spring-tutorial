(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{385:function(e,r,t){"use strict";t.r(r);var o=t(4),a=Object(o.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"spring-mvc-之过滤器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-之过滤器"}},[e._v("#")]),e._v(" Spring MVC 之过滤器")]),e._v(" "),r("p",[r("code",[e._v("spring-web")]),e._v(" 模块提供了一些有用的 Filter：")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-http-put",target:"_blank",rel:"noopener noreferrer"}},[e._v("Form Data"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-forwarded-headers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Forwarded Headers"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-shallow-etag",target:"_blank",rel:"noopener noreferrer"}},[e._v("Shallow ETag"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-cors",target:"_blank",rel:"noopener noreferrer"}},[e._v("CORS"),r("OutboundLink")],1)])]),e._v(" "),r("h2",{attrs:{id:"表单内容过滤器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#表单内容过滤器"}},[e._v("#")]),e._v(" 表单内容过滤器")]),e._v(" "),r("p",[e._v("浏览器只能通过 HTTP GET 或 HTTP POST 提交表单数据，但非浏览器客户端也可以使用 HTTP PUT、PATCH 和 DELETE。 Servlet API 需要 "),r("code",[e._v("ServletRequest.getParameter*()")]),e._v(" 系列方法来支持仅对 HTTP POST 的表单字段访问。")]),e._v(" "),r("p",[r("code",[e._v("spring-web")]),e._v(" 模块提供了 "),r("code",[e._v("FormContentFilter")]),e._v(" 来拦截内容类型为 "),r("code",[e._v("applicationx-www-form-urlencoded")]),e._v(" 的 HTTP PUT、PATCH、DELETE 请求，从请求体中读取表单数据，并包装 "),r("code",[e._v("ServletRequest")]),e._v(" 通过 "),r("code",[e._v("ServletRequest.getParameter()")]),e._v(" 系列方法使表单数据可用。")]),e._v(" "),r("h2",{attrs:{id:"转发过滤器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#转发过滤器"}},[e._v("#")]),e._v(" 转发过滤器")]),e._v(" "),r("p",[e._v("当请求通过代理（如负载均衡器）时，主机、端口和方案可能会发生变化，这使得从客户端角度创建指向正确主机、端口和方案的链接成为一项挑战。")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://tools.ietf.org/html/rfc7239",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 7239"),r("OutboundLink")],1),e._v(" 定义了 "),r("code",[e._v("Forwarded")]),e._v(" HTTP 头，代理可以使用它来提供有关原始请求的信息。还有其他非标准头，包括 "),r("code",[e._v("X-Forwarded-Host")]),e._v("、"),r("code",[e._v("X-Forwarded-Port")]),e._v("、"),r("code",[e._v("X-Forwarded-Proto")]),e._v("、"),r("code",[e._v("X-Forwarded-Ssl")]),e._v(" 和 "),r("code",[e._v("X-Forwarded-Prefix")]),e._v("。")]),e._v(" "),r("p",[r("code",[e._v("ForwardedHeaderFilter")]),e._v(" 是一个 Servlet 过滤器，它修改请求以便 a) 根据 "),r("code",[e._v("Forwarded")]),e._v(" 头更改主机、端口和 scheme；b) 删除这些头以消除进一步的影响。该过滤器依赖于包装请求，因此它必须排在其他过滤器之前，例如 "),r("code",[e._v("RequestContextFilter")]),e._v("，它应该与修改后的请求一起使用，而不是原始请求。")]),e._v(" "),r("p",[r("code",[e._v("Forwarded")]),e._v(" 头有安全考量，因为应用程序无法知道头是由代理按预期添加的，还是由恶意客户端添加的。这就是为什么应将信任边界处的代理配置为删除来自外部的不受信任的 "),r("code",[e._v("Forwarded")]),e._v(" 头。还可以使用 "),r("code",[e._v("removeOnly=true")]),e._v(" 配置 "),r("code",[e._v("ForwardedHeaderFilter")]),e._v("，在这种情况下它会删除但不使用头。")]),e._v(" "),r("p",[e._v("为了支持"),r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-async",target:"_blank",rel:"noopener noreferrer"}},[e._v("异步请求"),r("OutboundLink")],1),e._v("和错误分派，此过滤器应使用 "),r("code",[e._v("DispatcherType.ASYNC")]),e._v(" 和 "),r("code",[e._v("DispatcherType.ERROR")]),e._v(" 进行映射。如果使用 Spring Framework 的 "),r("code",[e._v("AbstractAnnotationConfigDispatcherServletInitializer")]),e._v("（参见 "),r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-container-config",target:"_blank",rel:"noopener noreferrer"}},[e._v("Servlet Config"),r("OutboundLink")],1),e._v("），所有过滤器都会自动为所有调度类型注册。但是，如果通过 "),r("code",[e._v("web.xml")]),e._v(" 或在 Spring Boot 中通过 "),r("code",[e._v("FilterRegistrationBean")]),e._v(" 注册过滤器，请确保除了 "),r("code",[e._v("DispatcherType.REQUEST")]),e._v(" 之外还包括 "),r("code",[e._v("DispatcherType.ASYNC")]),e._v(" 和 "),r("code",[e._v("DispatcherType.ERROR")]),e._v("。")]),e._v(" "),r("h2",{attrs:{id:"etag-过滤器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#etag-过滤器"}},[e._v("#")]),e._v(" ETag 过滤器")]),e._v(" "),r("p",[r("code",[e._v("ShallowEtagHeaderFilter")]),e._v(" 过滤器通过缓存写入响应的内容并从中计算 MD5 哈希来创建“浅”ETag。下次客户端发送时，它会做同样的事情，但它还会将计算值与 "),r("code",[e._v("If-None-Match")]),e._v(" 请求标头进行比较，如果两者相等，则返回 304 (NOT_MODIFIED)。")]),e._v(" "),r("p",[e._v("此策略节省网络带宽但不节省 CPU，因为必须为每个请求计算完整响应。前面描述的控制器级别的其他策略可以避免计算。")]),e._v(" "),r("p",[e._v("此过滤器有一个 "),r("code",[e._v("writeWeakETag")]),e._v(" 参数，该参数将过滤器配置为写入类似于以下内容的弱 ETag："),r("code",[e._v('W"02a2d595e6ed9a0b24f027f2b63b134d6"')]),e._v("（如 "),r("a",{attrs:{href:"https://tools.ietf.org/html/rfc7232#section-2.3",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 7232 Section 2.3"),r("OutboundLink")],1),e._v(" 中所定义）。")]),e._v(" "),r("p",[e._v("为了支持"),r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-async",target:"_blank",rel:"noopener noreferrer"}},[e._v("异步请求"),r("OutboundLink")],1),e._v("，这个过滤器必须用 "),r("code",[e._v("DispatcherType.ASYNC")]),e._v(" 映射，这样过滤器才能延迟并成功生成一个 ETag 到最后最后一次异步调度。如果使用 Spring Framework 的 "),r("code",[e._v("AbstractAnnotationConfigDispatcherServletInitializer")]),e._v("，所有过滤器都会自动为所有调度类型注册。但是，如果通过 "),r("code",[e._v("web.xml")]),e._v(" 或在 Spring Boot 中通过 "),r("code",[e._v("FilterRegistrationBean")]),e._v(" 注册过滤器，请确保包含 "),r("code",[e._v("DispatcherType.ASYNC")]),e._v("。")]),e._v(" "),r("h2",{attrs:{id:"跨域过滤器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨域过滤器"}},[e._v("#")]),e._v(" 跨域过滤器")]),e._v(" "),r("p",[e._v("Spring MVC 通过控制器上的注解为 CORS 配置提供细粒度支持。但是，当与 Spring Security 一起使用时，建议依赖内置的 "),r("code",[e._v("CorsFilter")]),e._v("，它必须在 Spring Security 的过滤器链之前订阅。")]),e._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Framework 官方文档"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Framework 官方文档之 Web"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=a.exports}}]);